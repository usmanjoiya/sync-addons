<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2020 Ivan Yelizariev <https://twitter.com/yelizariev>
     License MIT (https://opensource.org/licenses/MIT). -->
<odoo>
    <!-- Trello-Github -->
    <record id="trello-github_project" model="sync.project">
        <field name="name">Demo Trello-Github Integration</field>
        <field name="secret_code">
<![CDATA[
# consts
GITHUB="github"
TRELLO="trello"

from github import Github as _Github
if not secrets.GITHUB_TOKEN:
    raise Exception("bot token is not set")
if not secrets.GITHUB_REPO:
    raise Exception("github repo is not set")

_g = _Github(secrets.GITHUB_TOKEN)
_grepo = _g.get_repo(secrets.GITHUB_REPO)

# Trello cards
def trello_card_create(name, issue_id):
    log_transmission(TRELLO, "create: %s" % name)
    return card_id

def trello_card_add_labels(card_id, tlabel_ids):
    log_transmission(TRELLO, "add labels to card#%s: %s" % (card_id, tlabel_ids))
    pass

def trello_card_remove_labels(card_id, tlabel_ids):
    log_transmission(TRELLO, "remove labels from card#%s: %s" % (card_id, tlabel_ids))
    pass

def trello_card_add_message(card_id, message):
    log_transmission(TRELLO, "add message to card#%s: %s" % (card_id, message))
    pass

# Trello labels
def trello_label_create(name):
    log_transmission(TRELLO, "create label: %s" % (name))
    return label_id

def trello_label_delete(tlabel_id):
    log_transmission(TRELLO, "delete label: %s" % (tlabel_id))
    pass

def trello_label_update(tlabel_id, new_name):
    log_transmission(TRELLO, "label#%s update: %s" % (tlabel_id, new_name))
    pass

# Github webhooks

def github_set_webhook(url, events):
    # API: https://docs.github.com/en/rest/reference/repos#create-a-repository-webhook
    # Events: https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads
    config = {"url": url}
    _grepo.create_hook("web", config, events)

# Github issues
def github_issue_add_labels(issue_id, glabel_ids):
    pass

def github_issue_remove_labels(issue_id, glabel_ids):
    pass

# Github labels
def github_label_create(name):
    return glabel_id

def github_label_delete(glabel_id):
    pass

def github_label_update(glabel_id, new_name):
    pass
]]>
        </field>
        <field name="common_code">
<![CDATA[
ISSUES_REL="TRELLO_GITHUB_ISSUES_REL"
LABELS_REL="TRELLO_GITHUB_LABELS_REL"

def get_related_label(from_id, name, from_system, to_system):
    elink = get_link(LABELS_REL, [(from_system, from_id), (to_system, None)])

    if elink:
        return elink.get(to_system)
    else:
        to_id = github_label_create(name) if to_system == GITHUB else trello_label_create(name)
        elink = set_link(LABELS_REL, [(from_system, from_id), (to_system, to_id)])
        return to_id

def github2trello_labels(labels):
    tlabel_ids = []
    for lb in labels:
        label_id = lb["id"]
        label_name = lb["name"]
        tlabel_id = get_related_label(label_id, label_name, from_system=GITHUB, to_system=TRELLO)
        tlabel_ids.append(tlabel_id)
    return tlabel_ids

]]>
        </field>
    </record>
    <record id="trello-github_project_secret_github_token" model="sync.project.secret">
        <field name="key">GITHUB_TOKEN</field>
        <field name="description">
<![CDATA[
            Token with access to read issues and create webhooks. See
            https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token
]]>
        </field>
        <field name="project_id" ref="sync.trello-github_project" />
    </record>
    <record id="trello-github_project_secret_github_repo" model="sync.project.secret">
        <field name="key">GITHUB_REPO</field>
        <field name="description">owner/repo_name</field>
        <field name="project_id" ref="sync.trello-github_project" />
    </record>
    <record id="trello-github_project_param_prefix_name" model="sync.project.param">
        <field name="key">ISSUE_FROM_GITHUB_PREFIX</field>
        <field name="value">GITHUB:</field>
        <field name="project_id" ref="sync.trello-github_project" />
    </record>
    <record id="trello-github_project_param_prefix_message" model="sync.project.param">
        <field name="key">MESSAGE_PREFIX</field>
        <field name="value">A Message posted on GitHub:</field>
        <field name="project_id" ref="sync.trello-github_project" />
    </record>
    <record
        id="trello-github_project_param_labels_merge_strategy"
        model="sync.project.param"
    >
        <field name="key">LABELS_MERGE_STRATEGY</field>
        <field name="description">
            Possible values:
USE_TRELLO, USE_GITHUB: use version from one side and override values from another
UNION: add missed labels to each side
INTERSECTION: remove labes that are not attached on another side
        </field>
        <field name="project_id" ref="sync.trello-github_project" />
    </record>
    <record id="trello-github_task_setup" model="sync.task">
        <field name="name">Setup</field>
        <field name="project_id" ref="sync.trello-github_project" />
        <field name="code">
<![CDATA[
def handle_button():
    if TRIGGER_NAME == "SETUP_GITHUB":
        github_set_webhook(webhooks.GITHUB_ISSUE_UPDATES, ["issues"])
        github_set_webhook(webhooks.GITHUB_LABEL_UPDATES, ["label"])
    elif TRIGGER_NAME == "SETUP_TRELLO":
        TODO
    else:
        raise Exception("Unknown button event: %s" % TRIGGER_NAME)
]]>
        </field>
    </record>
    <record
        id="trello-github_task_setup_trigger_button_github"
        model="sync.trigger.button"
    >
        <field name="name">Setup Github Webhook</field>
        <field name="sync_task_id" ref="sync.trello-github_task_setup" />
        <field name="trigger_name">SETUP_GITHUB</field>
    </record>
    <record
        id="trello-github_task_setup_trigger_button_trello"
        model="sync.trigger.button"
    >
        <field name="name">Setup Trello Webhook</field>
        <field name="sync_task_id" ref="sync.trello-github_task_setup" />
        <field name="trigger_name">SETUP_TRELLO</field>
    </record>
    <record id="trello-github_task_issues" model="sync.task">
        <field name="name">Sync Github Issues to Trello (name, messages, labels)</field>
        <field name="project_id" ref="sync.trello-github_project" />
        <field name="code">
<![CDATA[
def handle_webhook(httprequest):
    issue_id = TODO
    issue_name = TODO
    elink = get_link(ISSUES_REL, {GITHUB: issue_id, TRELLO: None})
    if not elink:
        card_id = trello_card_create(issue_name, issue_id)
        elink = set_link(ISSUES_REL, {GITHUB: issue_id, TRELLO: card_id})

    issue_message = TODO
    if issue_message:
        message = "%s%s" % (params.MESSAGE_PREFIX, issue_message)
        trello_card_add_message(elink.get(TRELLO), message)

    # attached labels:
    labels = TODO
    tlabel_ids = github2trello_labels(labels)

    if tlabel_ids:
        trello_card_add_labels(elink.get(TRELLO), tlabel_ids)

    # detached labels:
    labels = TODO
    tlabel_ids = github2trello_labels(labels)

    if tlabel_ids:
        trello_card_remove_labels(elink.get(TRELLO), tlabel_ids)

def handle_button():
    # Sync all existing open github issues to trello
    fetch_github_issues()

def fetch_github_issues(page=0):
    CHUNK_SIZE=10
    # fetch page
    TODO
    if not issues:
        return
    # split issues into chunks
    for TODO in TODO:
        chunk = TODO
        add_job("process_github_issues")(chunk)
    # fetch next page
    add_job("fetch_github_issues")(page+1)

def process_github_issues():
    # Should be similar to process a single issue (see handle_webhook)
    TODO

]]>
        </field>
    </record>
    <record
        id="trello-github_task_issues_trigger_webhook_github"
        model="sync.trigger.webhook"
    >
        <field name="name">Github Issue updates</field>
        <field name="sync_task_id" ref="sync.trello-github_task_issues" />
        <field name="trigger_name">GITHUB_ISSUE_UPDATES</field>
    </record>
    <record id="trello-github_task_cards" model="sync.task">
        <field name="name">Sync Trello Cards to Github (labels)</field>
        <field name="project_id" ref="sync.trello-github_project" />
        <field name="code">
<![CDATA[
def handle_webhook(httprequest):
    # Code is similar to github to trello sync
    pass
]]>
        </field>
    </record>
    <record
        id="trello-github_task_issues_trigger_webhook_trello"
        model="sync.trigger.webhook"
    >
        <field name="name">Trello Card updates</field>
        <field name="sync_task_id" ref="sync.trello-github_task_cards" />
        <field name="trigger_name">TRELLO_CARD_UPDATES</field>
    </record>
    <record id="trello-github_task_labels" model="sync.task">
        <field name="name">Sync labels Updating/Deleting</field>
        <field name="project_id" ref="sync.trello-github_project" />
        <field name="code">
<![CDATA[
def handle_webhook(httprequest):
    glabel_id = None
    tlabel_id = None
    is_updated = None
    is_deleted = None
    if TRIGGER_NAME == "TRELLO_LABEL_UPDATES":
        tlabel_id = TODO
    elif TRIGGER_NAME == "GITHUB_LABEL_UPDATES":
        is_updated = httprequest.form["action"] == "edited"
        is_deleted = httprequest.form["action"] == "deleted"
        glabel_id = httprequest.form["label"]["id"]
    else:
       raise Exception("Unknown Event")

    elinks = search_links(LABELS_REL, {GITHUB: glabel_id, TRELLO: tlabel_id})
    if not elinks:
        # label is not linked
        return
    glabel_id = elinks[0].get(GITHUB)
    tlabel_id = elinks[0].get(TRELLO)
    if is_updated:
        if TRIGGER_NAME == "TRELLO_LABEL_UPDATES":
            github_label_update(glabel_id, new_name)
        else:
            trello_label_update(tlabel_id, new_name)

    if is_deleted:
        elinks.unlink()
        if TRIGGER_NAME == "TRELLO_LABEL_UPDATES":
            github_label_delete(glabel_id)
        else:
            trello_label_detele(tlabel_id)

]]>
        </field>
    </record>
    <record
        id="trello-github_task_labels_trigger_webhook_trello"
        model="sync.trigger.webhook"
    >
        <field name="name">Trello Label updates</field>
        <field name="sync_task_id" ref="sync.trello-github_task_labels" />
        <field name="trigger_name">TRELLO_LABEL_UPDATES</field>
    </record>
    <record
        id="trello-github_task_labels_trigger_webhook_github"
        model="sync.trigger.webhook"
    >
        <field name="name">Github Label updates</field>
        <field name="sync_task_id" ref="sync.trello-github_task_labels" />
        <field name="trigger_name">GITHUB_LABEL_UPDATES</field>
    </record>
    <record id="trello-github_task_conflicts_resolving" model="sync.task">
        <field name="name">Labels Conflict Resolving</field>
        <field name="project_id" ref="sync.trello-github_project" />
        <field name="code">
<![CDATA[
def handle_cron():
    elinks = search_links(ISSUES_REL, {GITHUB: None, TRELLO: None})
    issue_ids = elinks.get(GITHUB)
    # https://docs.github.com/en/rest/reference/issues#list-repository-issues
    # issue is {id: int, labels: [{id: int, name: str, ...}]}
    issues = TODO
    # issue_id -> issue
    issues_index = TODO

    card_ids = elinks.get(TRELLO)
    # https://developer.atlassian.com/cloud/trello/rest/api-group-boards/#api-boards-id-cards-get
    # https://developer.atlassian.com/cloud/trello/rest/api-group-cards/#api-cards-id-get
    # card is dict {id: int, idLabels: [int], ...}
    cards = TODO
    # card_id -> card
    cards_index = TODO

    for el in elinks:
        card_id = el.get(TRELLO)
        issue_id = el.get(GITHUB)
        card = cards_index.get(card_id)
        issue = issues_index.get(issue_id)
        if not (card and issue):
            log("Linked card or issue is missed: %s" % (card, issue), level=LOG_WARNING)
            continue
        # compare labels
        tlabel_ids = card.idsLabels
        glabel_ids = [lbl["id"] for lbl in issue["labels"]]
        tlinks = search_links(LABELS_REL, {GITHUB: None, TRELLO: tlabel_ids})
        glinks = search_links(LABELS_REL, {GITHUB: glabel_ids, TRELLO: None})
        if tlinks == glinks:
            # all fine
            continue
        logs("Found labels mismatch: issue=%s, card=%s" % (issue["id"], card["id"]), level=LOG_DEBUG)

        tlinks_add = None
        tlinks_remove = None
        glinks_add = None
        glinks_remove = None
        if LABELS_MERGE_STRATEGY == "USE_TRELLO":
            glinks_add = tlinks - glinks
            glinks_remove = glinks - tlinks
        elif LABELS_MERGE_STRATEGY == "USE_GITHUB":
            tlinks_add = glinks - tlinks
            tlinks_remove = tlinks - glinks
        elif LABELS_MERGE_STRATEGY == "UNION":
            tlinks_add = glinks - tlinks
            glinks_add = tlinks - glinks
        elif LABELS_MERGE_STRATEGY == "INTERSECTION":
            tlinks_remove = tlinks - glinks
            glinks_remove = glinks - tlinks
        else:
            raise Exception("Unknown LABELS_MERGE_STRATEGY: %s" % LABELS_MERGE_STRATEGY, level=LOG_ERROR)

        if tlinks_add:
            trello_card_add_labels(card_id, tlinks_add.get(TRELLO))
        if glinks_add:
            github_issue_add_labels(card_id, glinks_add.get(GITHUB))
        if tlinks_remove:
            trello_card_remove_labels(card_id, tlinks_remove.get(TRELLO))
        if glinks_remove:
            github_issue_remove_labels(card_id, glinks_remove.get(GITHUB))

]]>
        </field>
    </record>
    <record id="trello-github_task_conflicts_resolving_cron" model="sync.trigger.cron">
        <field name="trigger_name">CONFLICT_RESOLVING</field>
        <field name="sync_task_id" ref="sync.trello-github_task_conflicts_resolving" />
        <field name="interval_number">1</field>
        <field name="interval_type">days</field>
    </record>
</odoo>

<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2020 Ivan Yelizariev <https://it-projects.info/team/yelizariev>
     License MIT (https://opensource.org/licenses/MIT). -->
<odoo>
    <!-- Telegram -->
    <record id="telegram_project" model="sync.project">
        <field name="name">Demo Telegram Integration</field>
        <field name="network_access" eval="True"/>
        <field name="secret_code">
from odoo.tools import html2plaintext
from lxml.html import clean

# https://github.com/python-telegram-bot/python-telegram-bot
from telegram import Bot as _Bot, Update
_bot = None
if secrets.TELEGRAM_BOT_TOKEN:
    _bot = _Bot(token=secrets.TELEGRAM_BOT_TOKEN)
else:
    raise Exception("bot token is not set")

def sendMessage(chat_id, *args, **kwargs):
    log_transmission("%s@telegram" % chat_id, json.dumps([args, kwargs]))
    _bot.sendMessage(chat_id, *args, **kwargs)

        </field>
        <field name="common_code">
def user2name(user):
    if user.get('username'):
        return '@%s' % (user.get('username'))

    name = user.get('first_name')
    if user.get('last_name'):
        name += ' %s' % user.get('last_name')

    return name

def html_sanitize_telegram(html):
    allowed_tags = frozenset({"b", "i", "u", "s", "a", "code", "pre"})
    cleaner = clean.Cleaner(safe_attrs_only=True, safe_attrs=frozenset(), allow_tags=allowed_tags)
    html = cleaner.clean_html(html)
    return html

        </field>
    </record>

    <record id="telegram_project_param_welcome" model="sync.project.param">
        <field name="key">TELEGRAM_WELCOME_MESSAGE</field>
        <field name="value">Hello! How can I help you?</field>
        <field name="description">Message that is sent to a user on first bot usage</field>
        <field name="project_id" ref="sync.telegram_project"/>
    </record>

    <record id="telegram_project_param_message_sent" model="sync.project.param">
        <field name="key">TELEGRAM_MESSAGE_SENT</field>
        <field name="value">The message has sent in telegram:</field>
        <field name="description">When Odoo Bot reports on successfully sent telegram message</field>
        <field name="project_id" ref="sync.telegram_project"/>
    </record>

    <record id="telegram_project_param_prefix" model="sync.project.param">
        <field name="key">PARTNER_NAME_PREFIX</field>
        <field name="value">Telegram: </field>
        <field name="description">Prefix for new partner name</field>
        <field name="project_id" ref="sync.telegram_project"/>
    </record>

    <record id="telegram_project_secret" model="sync.project.secret">
        <field name="key">TELEGRAM_BOT_TOKEN</field>
        <field name="description">Authentication token provided by https://t.me/BotFather</field>
        <field name="project_id" ref="sync.telegram_project"/>
    </record>

    <!-- telegram: task setup -->
    <record id="telegram_task_setup" model="sync.task">
        <field name="name">Setup</field>
        <field name="project_id" ref="sync.telegram_project"/>
        <field name="code">
def handle_button():
    bot.setWebhook(webhooks.TELEGRAM, allowed_updates=["message", "edited_message"])
        </field>
    </record>

    <record id="telegram_trigger_button" model="sync.trigger.button">
        <field name="name">Setup Webhook</field>
        <field name="sync_task_id" ref="sync.telegram_task_setup"/>
        <field name="trigger_name">TELEGRAM</field>
    </record>

    <!-- telegram: task main -->
    <record id="telegram_task_main" model="sync.task">
        <field name="name">Handle Messages</field>
        <field name="project_id" ref="sync.telegram_project"/>
        <field name="code">
def handle_webhook(httprequest):
    telegram_payload = httprequest.form
    update = Update.de_json(telegram_payload, bot)
    message = update.message or update.edited_message
    is_edit = bool(update.edited_message)
    user_ref = "%s@telegram" % message.user.id
    partner = env["res.partner"].search([("ref", "=", user_ref)])
    if not partner:
        name = "%s%s" % (params.PARTNER_NAME_PREFIX, user2name(message.user))
        partner = env["res.partner"].create({"name": name, "ref": user_ref})

    odoo_message_text = "From Telegram:"

    if message.text == "/start":
        sendMessage(message.chat.id, params.TELEGRAM_WELCOME_MESSAGE)
    elif is_edit:
        odoo_message_text = "Contact has updated his message:"

    odoo_message_text = "%s\n\n%s" % (odoo_message_text, message.text)

    partner.message_post(body=odoo_message_text)


def handle_db(records):
    # records are instances of mail.message
    for r in records:
        if not html2plaintext(r.body or "").startswith("/telegram"):
            continue
        partner = env["res.partner"].browse(r.res_id)
        user_ref = partner.ref or ""
        if not user_ref.endswith("@telegram"):
            continue
        telegram_user_id = user_ref.split("@telegram")[0]
        telegram_message_html = html_sanitize_telegram(r.body)
        telegram_message_html = telegram_message_html.replace("/telegram", "")
        sendMessage(telegram_user_id, telegram_message_html)

        odoo_message_text = "%s:\n\n%s" % (params.TELEGRAM_MESSAGE_SENT, telegram_message_html)
        partner.message_post(body=odoo_message_text)

        </field>
    </record>

    <record id="telegram_trigger_webhook" model="sync.trigger.webhook">
        <field name="name">Telegram updates</field>
        <field name="sync_task_id" ref="sync.telegram_task_main"/>
        <field name="trigger_name">TELEGRAM</field>
    </record>

    <record id="telegram_trigger_automation" model="sync.trigger.automation">
        <field name="name">On new message posted</field>
        <field name="sync_task_id" ref="sync.telegram_task"/>
        <field name="model_id" ref="mail.model_mail_message"/>
        <field name="trigger">on_create</field>
        <field name="filter_domain">[["model","=","res.partner"],["body","ilike","/telegram"]]</field>
    </record>

    <!-- Odoo2odoo -->
    <record id="odoo2odoo_project" model="sync.project">
        <field name="name">Demo Odoo2odoo Integration</field>
        <field name="network_access" eval="True"/>
        <field name="secret_code">
import xmlrpc.client as _client

if not all([params.URL, params.DB, secrets.USERNAME, secrets.PASSWORD]):
    raise Exception("External Odoo Credentials are not set")

def odoo_execute_kw(model, method, *args, **kwargs):
    log_transmission("%s::%s" % (params.URL, params.DB), json.dumps([method, args, kwargs]))
    common = _client.ServerProxy('{}/xmlrpc/2/common'.format(params.URL))
    uid = common.authenticate(db, secrets.USERNAME, secrets.PASSWORD, {})
    models = xmlrpc.client.ServerProxy('{}/xmlrpc/2/object'.format(params.URL))
    res = models.execute_kw(params.DB, uid, secrets.PASSWORD, model, method, args, kwargs)
    log("Response: %s" % res, level="debug")
    return res
        </field>
        <field name="common_code">
PARTNER_REL = "odoo2odoo_partner"
IMAGE_FIELD = "image"
def partner2vals(partner):
    FIELDS = ["name", IMAGE_FIELD]
    res = {}
    for f in FIELDS:
        res[f] = getattr(partner, f)
    return res

def parse_date(s):
    raise NotImplementedError(s)

        </field>
    </record>

    <record id="odoo2odoo_project_param_prefix" model="sync.project.param">
        <field name="key">UPLOAD_ALL_PARTNER_PREFIX</field>
        <field name="value">Sync Studio: </field>
        <field name="project_id" ref="sync.odoo2odoo_project"/>
    </record>

    <record id="odoo2odoo_project_param_url" model="sync.project.param">
        <field name="key">URL</field>
        <field name="description">URL to external Odoo, e.g. https://odoo.example</field>
        <field name="project_id" ref="sync.odoo2odoo_project"/>
    </record>

    <record id="odoo2odoo_project_param_DB" model="sync.project.param">
        <field name="key">DB</field>
        <field name="description">Odoo database name</field>
        <field name="project_id" ref="sync.odoo2odoo_project"/>
    </record>

    <record id="odoo2odoo_project_secret_username" model="sync.project.param">
        <field name="key">USERNAME</field>
        <field name="description">e.g. admin</field>
        <field name="project_id" ref="sync.odoo2odoo_project"/>
    </record>

    <record id="odoo2odoo_project_secret_password" model="sync.project.param">
        <field name="key">PASSWORD</field>
        <field name="project_id" ref="sync.odoo2odoo_project"/>
    </record>

    <record id="odoo2odoo_task" model="sync.task">
        <field name="name">Sync Partners</field>
        <field name="project_id" ref="sync.odoo2odoo_project"/>
        <field name="code">
<![CDATA[
def create_external_partner(partner, name_prefix=""):
    vals = partner2vals(partner)
    vals["name"] = name_prefix + vals["name"]
    external_partner_id = odoo_execute_kw("res.partner", "create", vals)
    date_update = odoo_execute_kw("res.partner", "read", [external_partner_id], fields=["create_date"])
    partner.set_link(PARTNER_REL, external_partner_id, date_update)

def handle_db(records):
    # records are instances of created res.partner
    for r in records:
        create_external_partner(r)

def handle_cron(records):
    links = search_links(PARTNER_REL)
    if not links:
        log("Cron: there are no associated partners")
        return
    external_partners = odoo_execute_kw(
        "res.partner",
        "search_read",
        [["id", "in", links.external], ["write_date", ">", links.sync_date]],
        fields=["write_date", IMAGE_FIELD]
    )
    for ep in external_partners:
        link = get_link(PARTNER,  ep["id"])
        p = link.odoo
        if parse_date(ep["write_date"]) > link.sync_date:
            p.write({IMAGE_FIELD: ep[IMAGE_FIELD]})
            link.update(date_update)

def handle_button():
    for r in env["res.partner"].search([]):
        # check that record is not created yet
        link = r.get_link(PARTNER_REL)
        if link:
            # object already exist
            continue

        create_external_partner(r, name_prefix=params.UPLOAD_ALL_PARTNER_PREFIX)

]]>
        </field>
    </record>

    <record id="odoo2odoo_trigger_automation" model="sync.trigger.automation">
        <field name="name">On partner created</field>
        <field name="sync_task_id" ref="sync.odoo2odoo_task"/>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="trigger">on_create</field>
    </record>

    <record id="odoo2odoo_trigger_cron" model="sync.trigger.cron">
        <field name="sync_task_id" ref="sync.odoo2odoo_task"/>
        <field name="interval_number">15</field>
        <field name="interval_type">minute</field>
    </record>

    <record id="odoo2odoo_trigger_button" model="sync.trigger.button">
        <field name="name">Sync All Partners</field>
        <field name="sync_task_id" ref="sync.odoo2odoo_task"/>
        <field name="trigger_name">SYNC_ALL</field>
    </record>


    <!-- Trello-Github -->
    <record id="trello-github_project" model="sync.project">
        <field name="name">Demo Trello-Github Integration</field>
        <field name="network_access" eval="True"/>
        <field name="secret_code">
<![CDATA[
# Trello cards
def trello_card_create(name, issue_id):
    return card_id

def trello_card_add_labels(card_id, tlabel_ids):
    pass

def trello_card_remove_labels(card_id, tlabel_ids):
    pass

def trello_card_add_message(card_id, tlabel_ids):
    pass

# Trello labels
def trello_label_create(name):
    return label_id

def trello_label_delete(tlabel_id):
    pass

def trello_label_update(tlabel_id):
    pass

# Github issues
def github_issue_add_labels(issue_id, glabel_ids):
    pass

def github_issue_remove_labels(issue_id, glabel_ids):
    pass

# Github labels
def github_label_create(name):
    return glabel_id

def github_label_delete(glabel_id):
    pass

def github_label_update(glabel_id):
    pass
]]>
        </field>
        <field name="common_code">
<![CDATA[
ISSUES_REL="TRELLO_GITHUB_ISSUES_REL"
LABELS_REL="TRELLO_GITHUB_LABELS_REL"
# codes for links
GITHUB="github"
TRELLO="trello"

def get_related_label(from_id, name, from, to)
    elink = get_link(LABELS_REL, [(from, from_id), (to, None)])

    if elink:
        return elink.get(to)
    else:
        to_id = github_label_create(name) if to == GITHUB else trello_label_create(name)
        elink = set_link(LABELS_REL, [(from, from_id), (to, to_id)])
        return to_id

def github2trello_labels(labels)
    tlabel_ids = []
    for lb in labels:
        label_id = lb["id"]
        label_name = lb["name"]
        tlabel_id = get_related_label(label_id, label_name, from=GITHUB, to=TRELLO)
        tlabel_ids.append(tlabel_id)
    return tlabel_ids

]]>
        </field>
    </record>

    <record id="trello-github_project_param_prefix_name" model="sync.project.param">
        <field name="key">ISSUE_FROM_GITHUB_PREFIX</field>
        <field name="value">GITHUB: </field>
        <field name="project_id" ref="sync.trello-github_project"/>
    </record>
    <record id="trello-github_project_param_prefix_message" model="sync.project.param">
        <field name="key">MESSAGE_PREFIX</field>
        <field name="value">A Message posted on GitHub: </field>
        <field name="project_id" ref="sync.trello-github_project"/>
    </record>

    <record id="trello-github_task_issues" model="sync.task">
        <field name="name">Sync Github Issues to Trello (name, messages, labels)</field>
        <field name="project_id" ref="sync.trello-github_project"/>
        <field name="code">
<![CDATA[
def handle_webhook(httprequest):
    issue_id = TODO
    issue_name = TODO
    elink = get_link(ISSUES_REL, [(GITHUB, issue_id), (TRELLO, None)])
    if not elink:
        card_id = trello_card_create(issue_name, issue_id)
        elink = set_link(TRELLO_GITHUB_ISSUES_REL, [(GITHUB, issue_id), (TRELLO, card_id)])

    issue_message = TODO
    if issue_message:
        message = "%s%s" % (params.MESSAGE_PREFIX, issue_message)
        trello_card_add_message(elink.get(TRELLO), message)

    # attached labels:
    labels = TODO
    tlabel_ids = github2trello_labels(labels)

    if tlabel_ids:
        trello_card_add_labels(elink.get(TRELLO), tlabel_ids)

    # detached labels:
    labels = TODO
    tlabel_ids = github2trello_labels(labels)

    if tlabel_ids:
        trello_card_remove_labels(elink.get(TRELLO), tlabel_ids)
]]>
        </field>
    </record>

    <record id="trello-github_task_issues_trigger_webhook_github" model="sync.trigger.webhook">
        <field name="name">Github Issue updates</field>
        <field name="sync_task_id" ref="sync.trello-github_task_issues"/>
        <field name="trigger_name">GITHUB_ISSUE_UPDATES</field>
    </record>

    <record id="trello-github_task_cards" model="sync.task">
        <field name="name">Sync Trello Cards to Github (labels)</field>
        <field name="project_id" ref="sync.trello-github_project"/>
        <field name="code">
<![CDATA[
def handle_webhook(httprequest):
    # Code is similar to github to trello sync
    pass
]]>
        </field>
    </record>

    <record id="trello-github_task_issues_trigger_webhook_trello" model="sync.trigger.webhook">
        <field name="name">Trello Card updates</field>
        <field name="sync_task_id" ref="sync.trello-github_task_cards"/>
        <field name="trigger_name">TRELLO_CARD_UPDATES</field>
    </record>

    <record id="trello-github_task_labels" model="sync.task">
        <field name="name">Sync labels Updating/Deleting</field>
        <field name="project_id" ref="sync.trello-github_project"/>
        <field name="code">
            TODO
        </field>
    </record>
    TODO: add trello and github webhooks to the task above



    <!-- unittest -->
    <record id="test_project" model="sync.project">
        <field name="name">Project For Unittests</field>
        <!-- disable to hide from UI -->
        <field name="active" eval="False" />
    </record>

    <record id="test_project_param" model="sync.project.param">
        <field name="key">PREFIX</field>
        <field name="value">sync.partner_</field>
        <field name="project_id" ref="sync.test_project"/>
    </record>

    <record id="test_task" model="sync.task">
        <field name="name">Assign ref to new partners</field>
        <field name="project_id" ref="sync.test_project"/>
        <field name="code">
def handle_db(records):
    for r in records:
        TODO
        r.make_ref("%s_%s" % (params.PREFIX, r.id))
        </field>
    </record>

    <record id="test_trigger_automation" model="sync.trigger.automation">
        <field name="name">Sync test: Run code On partner created</field>
        <field name="sync_task_id" ref="sync.test_task"/>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="trigger">on_create</field>
    </record>
</odoo>

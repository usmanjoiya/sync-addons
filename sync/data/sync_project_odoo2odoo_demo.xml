<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2020 Ivan Yelizariev <https://twitter.com/yelizariev>
     License MIT (https://opensource.org/licenses/MIT). -->
<odoo>
    <!-- Odoo2odoo -->
    <record id="odoo2odoo_project" model="sync.project">
        <field name="name">Demo Odoo2odoo Integration</field>
        <field name="secret_code">
<![CDATA[
import xmlrpc.client as _client

if not all([params.URL, params.DB, secrets.USERNAME, secrets.PASSWORD]):
    raise Exception("External Odoo Credentials are not set")

def odoo_execute_kw(model, method, *args, **kwargs):
    log_transmission("%s::%s" % (params.URL, params.DB), json.dumps([method, args, kwargs]))
    common = _client.ServerProxy('{}/xmlrpc/2/common'.format(params.URL))
    uid = common.authenticate(db, secrets.USERNAME, secrets.PASSWORD, {})
    models = xmlrpc.client.ServerProxy('{}/xmlrpc/2/object'.format(params.URL))
    res = models.execute_kw(params.DB, uid, secrets.PASSWORD, model, method, args, kwargs)
    log("Response: %s" % res, level="debug")
    return res
]]>
        </field>
        <field name="common_code">
<![CDATA[
PARTNER_REL = "odoo2odoo_partner"
IMAGE_FIELD = "image"
def partner2vals(partner):
    FIELDS = ["name", IMAGE_FIELD]
    res = {}
    for f in FIELDS:
        res[f] = getattr(partner, f)
    return res

def parse_date(s):
    raise NotImplementedError(s)
]]>
        </field>
    </record>
    <record id="odoo2odoo_project_param_prefix" model="sync.project.param">
        <field name="key">UPLOAD_ALL_PARTNER_PREFIX</field>
        <field name="value">Sync Studio:</field>
        <field name="project_id" ref="sync.odoo2odoo_project" />
    </record>
    <record id="odoo2odoo_project_param_url" model="sync.project.param">
        <field name="key">URL</field>
        <field name="description">
            URL to external Odoo, e.g. https://odoo.example
        </field>
        <field name="project_id" ref="sync.odoo2odoo_project" />
    </record>
    <record id="odoo2odoo_project_param_DB" model="sync.project.param">
        <field name="key">DB</field>
        <field name="description">Odoo database name</field>
        <field name="project_id" ref="sync.odoo2odoo_project" />
    </record>
    <record id="odoo2odoo_project_secret_username" model="sync.project.param">
        <field name="key">USERNAME</field>
        <field name="description">e.g. admin</field>
        <field name="project_id" ref="sync.odoo2odoo_project" />
    </record>
    <record id="odoo2odoo_project_secret_password" model="sync.project.param">
        <field name="key">PASSWORD</field>
        <field name="project_id" ref="sync.odoo2odoo_project" />
    </record>
    <record id="odoo2odoo_task" model="sync.task">
        <field name="name">Sync Partners</field>
        <field name="project_id" ref="sync.odoo2odoo_project" />
        <field name="code">
<![CDATA[
def create_external_partners(partners, name_prefix=""):
    for partner in partners:
        vals = partner2vals(partner)
        vals["name"] = name_prefix + vals["name"]
        external_partner_id = odoo_execute_kw("res.partner", "create", vals)
        date_update = odoo_execute_kw("res.partner", "read", [external_partner_id], fields=["create_date"])
        partner.set_link(PARTNER_REL, external_partner_id, date_update)

def handle_db(records):
    # records are instances of created res.partner
    create_external_partners(records)

def handle_cron(records):
    links = env["res.partner"].search([]).search_links(PARTNER_REL)
    if not links:
        log("Cron: there are no associated partners")
        return
    external_partners = odoo_execute_kw(
        "res.partner",
        "search_read",
        [["id", "in", links.external], ["write_date", ">", links.sync_date]],
        fields=["write_date", IMAGE_FIELD]
    )
    for ep in external_partners:
        link = get_link(PARTNER,  ep["id"])
        p = link.odoo
        if parse_date(ep["write_date"]) > link.sync_date:
            p.write({IMAGE_FIELD: ep[IMAGE_FIELD]})
            link.update(date_update)

def handle_button():
    chunk = None
    CHUNK_SIZE = 10
    for r in env["res.partner"].search([]):
        # check that record is not created yet
        link = r.search_links(PARTNER_REL)
        if link:
            # object already exists
            continue

        if not chunk:
            chunk = r
        else:
            chunk |= r
        if len(chunk) == CHUNK_SIZE:
            async(create_external_partner)(chunk, name_prefix=params.UPLOAD_ALL_PARTNER_PREFIX)
            chunk = None
]]>
        </field>
    </record>
    <record id="odoo2odoo_trigger_automation" model="sync.trigger.automation">
        <field name="name">On partner created</field>
        <field name="sync_task_id" ref="sync.odoo2odoo_task" />
        <field name="model_id" ref="base.model_res_partner" />
        <field name="trigger">on_create</field>
    </record>
    <record id="odoo2odoo_trigger_cron" model="sync.trigger.cron">
        <field name="sync_task_id" ref="sync.odoo2odoo_task" />
        <field name="interval_number">15</field>
        <field name="interval_type">minutes</field>
    </record>
    <record id="odoo2odoo_trigger_button" model="sync.trigger.button">
        <field name="name">Sync All Partners</field>
        <field name="sync_task_id" ref="sync.odoo2odoo_task" />
        <field name="trigger_name">SYNC_ALL</field>
    </record>
</odoo>
